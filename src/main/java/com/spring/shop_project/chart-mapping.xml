<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chart">
	
	<!-- 검색기간 설정한 날짜 사이의 1일당 총 매출액 계산 -> 라인 차트로 하루 매출액 추이 표시가능 -->
	<select id="incomechart" resultType="order" parameterType="java.util.Map">
		select to_char(order_date, 'YYYY,MM,DD') order_date, sum(order_price*order_balance) totaldayincome 
		from shoporder
		where order_date between #{startdate} and #{enddate}
		group by order_date
		order by order_date
		<!-- int[] 배열 받아온거 반복문  -->
		<!-- 같은 의미 where r between #{array[0]} and #{array[1]} -->
		<!-- where rownum >= 1 and rownum <= 10 ==>CDATA쓰기 귀찮으면 between써 
		rownum 사용시 주의 : 먼저 rownum 번호 생성 다해놔-->
	</select>
	
	<!-- 한달간 각 품목별 매출액 계산 -> 차트로 품목별 매출액 비율 파이차트로 그려줌 -->
	<select id="piechart" resultType="order" parameterType="java.util.Map">
		select to_char(order_date, 'MM') order_month, sum(order_price*order_balance) monthincomeperproduct, product_name
		from shoporder s, product p
		where s.product_id = p.product_id
		and to_char(order_date, 'MM') = #{month} and to_char(order_date, 'YYYY') = #{year}
		group by to_char(order_date,'MM'), s.product_id, product_name
		order by monthincomeperproduct desc 
	</select>
	
	<!-- 현재월 기준의 기본 한달 총 매출액 구하기  -->
	<select id="monthtotal" resultType="int" parameterType="java.util.Map">
		select sum(monthincome) monthtotal 
		from (
		select to_char(order_date, 'MM') order_month, sum(order_price*order_balance) monthincome, product_id
		from shoporder
		where to_char(order_date, 'MM') = #{month} and to_char(order_date, 'YYYY') = #{year} 
		group by to_char(order_date,'MM'), product_id 
		order by monthincome desc
		)
	</select>
	
	
	<!-- 현재월기준 전월 총 매출액 구하기  -->
	<select id="prevmonthtotal" resultType="int" parameterType="java.util.Map">
		select sum(monthincome) monthtotal 
		from (
		select to_char(order_date, 'MM') order_month, sum(order_price*order_balance) monthincome, product_id
		from shoporder
		where to_char(order_date, 'MM') = #{prevmonth} and to_char(order_date, 'YYYY') = #{year} 
		group by to_char(order_date,'MM'), product_id 
		order by monthincome desc
		)
	</select>
	
	<!-- 전년동월 총 매출액  => 전년 동기대비 매출액 증가율 표시에 사용 -->
	<select id="prevyeartotal" resultType="int" parameterType="java.util.Map">
		select sum(monthincome) monthtotal 
		from (
		select to_char(order_date, 'MM') order_month, sum(order_price*order_balance) monthincome, product_id
		from shoporder
		where to_char(order_date, 'MM') = #{month} and to_char(order_date, 'YYYY') = #{prevyear} 
		group by to_char(order_date,'MM'), product_id 
		order by monthincome desc
		)
		
	</select>
	
	<!-- 오늘 총 매출액 보여주기  -->
	<select id="todaytotalincome" resultType="String">
		select sum(order_price*order_balance) todaytotalincome 
		from shoporder
		where order_date = to_char(sysdate,'YY/MM/DD')
		group by order_date
		order by order_date
	</select>
	
	<!-- 오늘 총 판매량 보여주기 -->
	<select id="todaytotalorder" resultType="String">
		select sum(order_balance) todaytotalorder
		from shoporder
		where order_date = to_char(sysdate,'YY/MM/DD')
		group by order_date
		order by order_date
	</select>
	
	<!-- 이번주 총 매출액 보여주기 -->
	<select id="weektotalincome" resultType="String">
	select sum(totalincome) from (
		select sum(order_price*order_balance) totalincome
		from shoporder
		where order_date between to_char(sysdate-7,'YY/MM/DD') and to_char(sysdate,'YY/MM/DD')
		group by order_date
		order by order_date)
	</select>
	
	<!-- 이번주 총 판매량 보여주기 -->
	<select id="weektotalorder" resultType="String">
	select sum(totalorder) from (
		select sum(order_balance) totalorder
		from shoporder
		where order_date between to_char(sysdate-7,'YY/MM/DD') and to_char(sysdate,'YY/MM/DD')
		group by order_date
		order by order_date)
	</select>
	
	<!-- 이번달 판매량 TOP3 상품 보여주기 -->
	<select id="monthtop3" resultType="order" parameterType="java.util.Map">
		<![CDATA[select rownum, product_id, order_balance
		from (
		select rownum , product_id, order_balance from shoporder
		where to_char(order_date, 'MM') = #{month} and to_char(order_date, 'YYYY') = #{year}
		order by order_balance desc)
		where rownum <=3 ]]>
	</select>
	
	
	
	
	
	
</mapper>

		
	






